# Sudoku Solver using Backtracking Algorithm

# Function to print the Sudoku grid
def print_grid(board):
    for row in board:
        print(" ".join(str(num) if num != 0 else '.' for num in row))

# Function to find an empty cell
def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j  # Return the row, column of the empty cell
    return None

# Function to check if placing a number is valid
def is_valid(board, num, row, col):
    # Check row
    if num in board[row]:
        return False

    # Check column
    if num in [board[i][col] for i in range(9)]:
        return False

    # Check 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False

    return True

# Backtracking algorithm to solve Sudoku
def solve_sudoku(board):
    empty = find_empty(board)
    if not empty:
        return True  # Puzzle is solved
    row, col = empty

    for num in range(1, 10):
        if is_valid(board, num, row, col):
            board[row][col] = num  # Place number

            if solve_sudoku(board):  # Recursive call
                return True

            board[row][col] = 0  # Backtrack

    return False

# Example Sudoku Puzzle (0 represents empty cells)
sudoku_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Solve and print the Sudoku puzzle
if solve_sudoku(sudoku_board):
    print("Solved Sudoku Puzzle:")
    print_grid(sudoku_board)
else:
    print("No solution exists.")
